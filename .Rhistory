x = "Date",
y = "Guarantee Value"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 11, hjust = 0.5, color = "gray40"),
axis.title = element_text(face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()
)
# return_rp lies in Mean Variance Optimization file
m <- 2.5
L_target <- 127/100
L_trigger <- 134/100
returns_choice <- readRDS("returns_choice.rds")
mkt_EU_period <- MKT_EU_EU %>% filter(date >= 200709 & date <= 202412)
colnames(mkt_EU_period) <- c("date", "return")
return_rp_df <- tibble(date = returns_choice$date, "return" = return_rp)
guarantees_rp <- CPPI(m, L_target, L_trigger, return_rp_df)
guarantees_MV <- CPPI(m, L_target, L_trigger, returns_choice)
guarantee_df <- data.frame(date = All_years$TIME_PERIOD[36:124],
"Portfolio 1" = guarantees_MV$Guarantee,
"Risk_parity" = guarantees_rp$Guarantee)
guarantee_df %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Guarantee") %>%
ggplot(aes(x = as.Date(date), y = Guarantee, color = Portfolio)) +
geom_line(size = 1.1) +
geom_point(size = 2, alpha = 0.7) +
# geom_line(color = "#0072B2", size = 1.1) +
# geom_point(color = "#0072B2", size = 2, alpha = 0.7) +
scale_color_manual(values = c("Portfolio.1"           = "#0072B2",
"Risk_parity"       = "#D55E00"),
breaks=c("Portfolio.1", "Risk_parity"),
labels=c("Portfolio 1", "Risk parity")) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
scale_y_continuous(labels = scales::number_format(accuracy = 0.01)) +
labs(
title = "Development of the Portfolio Guarantee Over Time",
subtitle = "Guarantee level implied by CPPI floor mechanism",
x = "Date",
y = "Guarantee Value"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 11, hjust = 0.5, color = "gray40"),
axis.title = element_text(face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()
)
breaks = c(
"Portfolio.1",
"European.Equity",
"Portfolio.1.Recommended"
)
m <- 2.5
L_target <- 127/100
L_trigger <- 134/100
returns_choice <- readRDS("returns_choice.rds")
mkt_EU_period <- MKT_EU_EU %>% filter(date >= 200709 & date <= 202412)
colnames(mkt_EU_period) <- c("date", "return")
guarantees_choice <- CPPI(1, 1.25, 1.3, returns_choice)
guarantees_EU_equity <- CPPI(1, 1.25, 1.3, mkt_EU_period)
guarantees_recommended <- CPPI(m, L_target, L_trigger, returns_choice)
guarantee_df <- data.frame(date = All_years$TIME_PERIOD[36:124],
"Portfolio 1" = guarantees_choice$Guarantee,
"European Equity" = guarantees_EU_equity$Guarantee,
"Portfolio 1 Recommended" = guarantees_recommended$Guarantee)
values = c(
"Portfolio.1" = "#0072B2",
"EE" = "#D55E00",
"Recommended strat" = "#009E73"
)
breaks = c(
"Portfolio.1",
"European.Equity",
"Portfolio.1.Recommended"
)
labels = c(
"Portfolio 1",
"European Equity",
"Portfolio 1 recommended strat"
)
guarantee_df %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Guarantee") %>%
ggplot(aes(x = as.Date(date), y = Guarantee, color = Portfolio)) +
geom_line(size = 1.1) +
geom_point(size = 2, alpha = 0.7) +
scale_color_manual(values = values,
breaks=breaks,
labels=labels) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
scale_y_continuous(labels = scales::number_format(accuracy = 0.01)) +
labs(
title = "Development of the Portfolio Guarantee Over Time",
subtitle = "Guarantee level implied by CPPI floor mechanism",
x = "Date",
y = "Guarantee Value"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 11, hjust = 0.5, color = "gray40"),
axis.title = element_text(face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()
)
m <- 2.5
L_target <- 127/100
L_trigger <- 134/100
returns_choice <- readRDS("returns_choice.rds")
mkt_EU_period <- MKT_EU_EU %>% filter(date >= 200709 & date <= 202412)
colnames(mkt_EU_period) <- c("date", "return")
guarantees_choice <- CPPI(1, 1.25, 1.3, returns_choice)
guarantees_EU_equity <- CPPI(1, 1.25, 1.3, mkt_EU_period)
guarantees_recommended <- CPPI(m, L_target, L_trigger, returns_choice)
guarantee_df <- data.frame(date = All_years$TIME_PERIOD[36:124],
"Portfolio 1" = guarantees_choice$Guarantee,
"European Equity" = guarantees_EU_equity$Guarantee,
"Portfolio 1 Recommended" = guarantees_recommended$Guarantee)
values = c(
"Portfolio.1" = "#0072B2",
"European.Equity" = "#D55E00",
"Portfolio.1.Recommended" = "#009E73"
)
breaks = c(
"Portfolio.1",
"European.Equity",
"Portfolio.1.Recommended"
)
labels = c(
"Portfolio 1",
"European Equity",
"Recommended strat"
)
guarantee_df %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Guarantee") %>%
ggplot(aes(x = as.Date(date), y = Guarantee, color = Portfolio)) +
geom_line(size = 1.1) +
geom_point(size = 2, alpha = 0.7) +
scale_color_manual(values = values,
breaks=breaks,
labels=labels) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
scale_y_continuous(labels = scales::number_format(accuracy = 0.01)) +
labs(
title = "Development of the Portfolio Guarantee Over Time",
subtitle = "Guarantee level implied by CPPI floor mechanism",
x = "Date",
y = "Guarantee Value"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 11, hjust = 0.5, color = "gray40"),
axis.title = element_text(face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()
)
guarantee_df %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Guarantee") %>%
ggplot(aes(x = as.Date(date), y = Guarantee, color = Portfolio)) +
geom_line(size = 1.1) +
geom_point(size = 2, alpha = 0.7) +
scale_color_manual(values = values,
breaks=breaks,
labels=labels) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
scale_y_continuous(labels = scales::number_format(accuracy = 0.01)) +
labs(
title = "Development of the Portfolio Guarantee Over Time",
subtitle = "Guarantee level implied by CPPI floor mechanism",
x = "Date",
y = "Guarantee Value"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 11, hjust = 0.5, color = "gray40"),
axis.title = element_text(face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
legend.position = "buttom"
)
guarantee_df %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Guarantee") %>%
ggplot(aes(x = as.Date(date), y = Guarantee, color = Portfolio)) +
geom_line(size = 1.1) +
geom_point(size = 2, alpha = 0.7) +
scale_color_manual(values = values,
breaks=breaks,
labels=labels) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
scale_y_continuous(labels = scales::number_format(accuracy = 0.01)) +
labs(
title = "Development of the Portfolio Guarantee Over Time",
subtitle = "Guarantee level implied by CPPI floor mechanism",
x = "Date",
y = "Guarantee Value"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 11, hjust = 0.5, color = "gray40"),
axis.title = element_text(face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
legend.position = "bottom"
)
Trigger_hit <- map(guarantees_trigger_target, "Trigger_hit")
Trigger_hit_df <- as.tibble(lapply(Trigger_hit, colSums))
summary_df <- Trigger_hit_df %>%
summarise(across(everything(), function(x)quantile(x, p = 0.5))) %>%
pivot_longer(
cols = everything(),
names_to = "Name",
values_to = "column_mean"
) %>%
mutate(
Trigger = str_split(Name, "x", simplify = TRUE)[, 3],
Trigger = as.numeric(Trigger)
)
ggplot(summary_df, aes(x = Trigger, y = column_mean)) +
geom_line(size = 1.2, color = "#0072B2") +
geom_point(size = 2.5, color = "#0072B2") +
scale_x_continuous(breaks = seq(min(summary_df$Trigger),
max(summary_df$Trigger),
by = 0.05)) +
scale_y_continuous(breaks = seq(min(0),
max(summary_df$column_mean),
by = 5)) +
labs(
title = "Median Value of tie-ins by Trigger level",
subtitle = "For m = 2.5 and Target level = 1.27",
x = "Trigger Level",
y = "Median value of tie-ins"
) +
theme_minimal()
guarantees_target <- map(guarantees_trigger_target, "Guarantees")
guarantees_target_mean <- sapply(guarantees_target, mean)
enframe(guarantees_target_mean, name = "name_str", value = "guarantees") %>%
extract(
name_str,
into = c("m", "Target", "Trigger"),
regex = "([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE
) %>%
group_by(Target) %>%
summarise(guarantees_target = mean(guarantees)) %>%
ggplot(aes(Target, guarantees_target)) +
geom_line() +
geom_vline(xintercept = 1.34) +
annotate(
"text",
x = 1.34,
y = Inf,
label = "Target = 1.34",
vjust = 2,
hjust = -0.2,
color = "blue"
) +
ggtitle("Average guarantee for each target level")
as_tibble(map(guarantees_trigger_target, "Guarantee")[paste("2.5x1.27x", seq(1.3, 2, 0.05), sep = "")]) %>%
rename_with(~ str_split_fixed(., "x", 3)[, 3]) %>%
cbind(tibble(date = 1:89)) %>%
pivot_longer(cols = -date, names_to = "Trigger_level", values_to = "Guarantee") %>%
ggplot(aes(date, Guarantee, color = Trigger_level)) +
geom_line()
as_tibble(map(guarantees_trigger_target, "Guarantee")[paste("2.5x1.27x", seq(1.32, 1.36, 0.01), sep = "")]) %>%
rename_with(~ str_split_fixed(., "x", 3)[, 3]) %>%
cbind(tibble(date = 1:89)) %>%
pivot_longer(cols = -date, names_to = "Trigger_level", values_to = "Guarantee") %>%
ggplot(aes(date, Guarantee, color = Trigger_level)) +
geom_line()
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 2.5
L_target <- 1.27
L_trigger <- seq(130, 230, 5)/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger & L_trigger - L_target <= 0.3)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
g <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
g[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(g) <- new_names
names(g$"2.5x1.27x1.3")
map(g, "Guarantee")
as_tibble(map(g, "Guarantee"))
as_tibble(map(g, "Guarantee")) %>%
rename_with(~ str_split_fixed(., "x", 3)[, 3])
as_tibble(map(g, "Guarantee")) %>%
rename_with(~ str_split_fixed(., "x", 3)[, 3]) %>%
mutate(date = 1:89) %>%
pivot_longer(cols = -date, names_to = "Trigger", values_to = "Guarantee") %>%
ggplot(aes(date, Guarantee, color = Trigger)) +
geom_line()
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 2.5
L_target <- 1.27
L_trigger <- seq(130, 230, 5)/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
g <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
g[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(g) <- new_names
as_tibble(map(g, "Guarantee")) %>%
rename_with(~ str_split_fixed(., "x", 3)[, 3]) %>%
mutate(date = 1:89) %>%
pivot_longer(cols = -date, names_to = "Trigger", values_to = "Guarantee") %>%
ggplot(aes(date, Guarantee, color = Trigger)) +
geom_line()
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 2.5
L_target <- 1.27
L_trigger <- seq(130, 230, 20)/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
g <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
g[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(g) <- new_names
as_tibble(map(g, "Guarantee")) %>%
rename_with(~ str_split_fixed(., "x", 3)[, 3]) %>%
mutate(date = 1:89) %>%
pivot_longer(cols = -date, names_to = "Trigger", values_to = "Guarantee") %>%
ggplot(aes(date, Guarantee, color = Trigger)) +
geom_line()
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 2.5
L_target <- 1.27
L_trigger <- c(1.27, seq(130, 230, 20)/100)
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
g <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
g[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(g) <- new_names
as_tibble(map(g, "Guarantee")) %>%
rename_with(~ str_split_fixed(., "x", 3)[, 3]) %>%
mutate(date = 1:89) %>%
pivot_longer(cols = -date, names_to = "Trigger", values_to = "Guarantee") %>%
ggplot(aes(date, Guarantee, color = Trigger)) +
geom_line()
L_trigger <- c(127, seq(130, 230, 20))/100
L_trigger
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 2.5
L_target <- 1.27
L_trigger <- c(127, seq(130, 230, 20))/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
g <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
g[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(g) <- new_names
as_tibble(map(g, "Guarantee")) %>%
rename_with(~ str_split_fixed(., "x", 3)[, 3]) %>%
mutate(date = 1:89) %>%
pivot_longer(cols = -date, names_to = "Trigger", values_to = "Guarantee") %>%
ggplot(aes(date, Guarantee, color = Trigger)) +
geom_line()
search_grid
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 2.5
L_target <- 1.27
L_trigger <- c(134, seq(130, 230, 20))/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
g <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
g[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(g) <- new_names
as_tibble(map(g, "Guarantee")) %>%
rename_with(~ str_split_fixed(., "x", 3)[, 3]) %>%
mutate(date = 1:89) %>%
pivot_longer(cols = -date, names_to = "Trigger", values_to = "Guarantee") %>%
ggplot(aes(date, Guarantee, color = Trigger)) +
geom_line()
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 2.5
L_target <- 1.27
L_trigger <- seq(130, 230, 20)/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
g <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
g[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(g) <- new_names
as_tibble(map(g, "Guarantee")) %>%
rename_with(~ str_split_fixed(., "x", 3)[, 3]) %>%
mutate(date = 1:89) %>%
pivot_longer(cols = -date, names_to = "Trigger", values_to = "Guarantee") %>%
ggplot(aes(date, Guarantee, color = Trigger)) +
geom_line()
initial_guarantee <- map_dfc(guarantees_m_2.5, ~ .[1,])
guarantees_m_2.5 <- readRDS("C:/Users/Nikolaj/OneDrive - University of Copenhagen/Aktuar/5. år/Asset allocation/Exam project/CPPI_strats_m_2.5")
initial_guarantee <- map_dfc(guarantees_m_2.5, ~ .[1,])
guarantees_m_2.5
g_initial <- map(guarantees_m_2.5, "Guarantee_month")
g_initial
initial_guarantee <- map_dfc(g_initial, ~ .[1,])
target_vals <- seq(1.05, 2.05, 0.1)
trigger_vals <- c("1.15", "1.3", "1.4", "1.95")
initial_guarantee %>%
mutate(Period = row_number()) %>%
pivot_longer(
cols = -Period,
names_to = "Name",
values_to = "Value"
) %>%
mutate(
Target = str_split(Name, "x", simplify = TRUE)[, 2],
Trigger = str_split(Name, "x", simplify = TRUE)[, 3]
) %>%
filter(Target %in% target_vals) %>%
group_by(Target, Period) %>%
summarise("Value" = mean(Value)) %>%
ggplot(aes(x = Period, y = Value, color = Target)) +
geom_line(size = 1.2) +
geom_point(size = 2.5) +
labs(
title = "Initial Guarantee",
x = "Start date of TDF",
y = "Initial Guarantee",
color = "Target"
) +
theme_minimal() +
theme(legend.position = "bottom")
initial_guarantee %>%
mutate(Period = row_number()) %>%
pivot_longer(
cols = -Period,
names_to = "Name",
values_to = "Value"
) %>%
mutate(
Target = str_split(Name, "x", simplify = TRUE)[, 2],
Trigger = str_split(Name, "x", simplify = TRUE)[, 3]
) %>%
# filter(Target %in% target_vals) %>%
group_by(Target, Period) %>%
summarise("Value" = mean(Value)) %>%
mutate("initial_guarantee_over_100" = Value >= 100) %>%
group_by(Target) %>%
summarise("n_initial_over_100" = sum(initial_guarantee_over_100),
"%_initial_over_100" = n_initial_over_100/89*100,
"min_initial_guarantee" = min(Value)) %>%
View()
