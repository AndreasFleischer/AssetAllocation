ggplot(mapping = aes(x = rowSums(return_strat))) +
geom_histogram(color = "white") +
geom_vline(xintercept = quantile(rowSums(return_strat), p = c(0.025, 0.975)))
# mean(rowSums(return_strat))
n <- nrow(excess_returns)-35-1
w_matrix_max_return <- matrix(NA, nrow = n, ncol = 12)
for(i in 1:n){
returns_period <- excess_returns[i:(i+35),-1]
mu <- colMeans(returns_period)
if(all(mu <= 0)){
w_matrix_max_return[i,] <- 0
} else{
w_matrix_max_return[i,] <- optimize_return(mu)
}
}
w_max_return <- as_tibble(w_matrix_max_return)
names(w_max_return) <- names(excess_returns[, -1])
w_max_return <- w_max_return %>%
mutate(.before = 1, date = size_mom_6_EU$date[36:(nrow(size_mom_6_EU)-1)])
w_max_return <- mutate(w_max_return, RF = 1-rowSums(w_max_return[,-1]))
round(w_max_return, 3)
max_return_strat <- round(returns[,-1] * w_max_return[,-1], 3)
mean(rowSums(max_return_strat[,-1]))
factors_excess_return <- sweep(factors[,-1], 1, RF.EU$return, "-")
factors_excess_return <- cbind(factors$date, factors_excess_return)
n_assets <- ncol(factors_excess_return[,-1])
n <- nrow(factors_excess_return) - 35 - 1
w_min_var <- matrix(NA, nrow = n, ncol = n_assets)
w_max_return <- matrix(NA, nrow = n, ncol = n_assets)
n_internal <- 5
w_internal <- array(NA, dim = c(n_internal, n, n_assets))
target_returns <- array(NA, c(n, n_internal))
Sigma <- array(NA, c(n, n_assets, n_assets))
mu <- array(NA, c(n, n_assets))
sharpe_EE <- rep(NA, n)
for(i in 1:n){
excess_returns_period <- factors_excess_return[i:(i+35),-1]
mu[i,] <- colMeans(excess_returns_period)
Sigma[i,,] <- cov(excess_returns_period)
w_min_var[i,] <- optimize_portfolio(mu[i,], Sigma[i,,])
w_max_return[i,] <- optimize_return(mu[i,])
return_min_var <- sum(mu[i,]*w_min_var[i,])
return_max_return <- sum(mu[i,]*w_max_return[i,])
target_returns_tmp <- seq(return_min_var, return_max_return, (return_max_return - return_min_var)/(n_internal+1))
target_returns[i,] <- target_returns_tmp[-c(1, length(target_returns_tmp))]
for(j in 1:length(target_returns[i,])){
w_internal[j,i,] <- optimize_internal(mu[i,], Sigma[i,,], target_returns[i,j])
}
sharpe_EE[i] <- mean(excess_returns_period$MKT_EU_EU)/sd(excess_returns_period$MKT_EU_EU)
}
colnames(w_min_var) <- colnames(factors[,-1])
current_dimnames <- dimnames(w_internal)
current_dimnames[[3]] <- colnames(factors[,-1])
dimnames(w_internal) <- current_dimnames
colnames(w_max_return) <- colnames(factors[,-1])
factors_period <- factors[37:nrow(factors),]
return_min_var <- rowSums(w_min_var*factors_period[,-1])
return_max_return <- rowSums(w_max_return*factors_period[,-1])
return_internal <- array(NA, c(n, n_internal))
for(i in 1:n_internal){
return_internal[,i] <- rowSums(w_internal[i,,]*factors_period[,-1])
}
cal_var <- function(w, Sigma){
return(t(w)%*%Sigma%*%w)
}
cal_return <- function(w, mu){
return(sum(w*mu))
}
cal_sharpe <- function(w, mu, Sigma){
return(cal_return(w, mu)/sqrt(cal_var(w, Sigma)))
}
sharpe_ratios <- array(NA, c(208, 7))
sharpe_rp <- rep(NA, 208)
for(i in 1:208){
sharpe_ratios[i, 1] <- cal_sharpe(w_min_var[i,], mu[i,], Sigma[i,,])
sharpe_ratios[i, 7] <- cal_sharpe(w_max_return[i,], mu[i,], Sigma[i,,])
for(j in 1:5){
sharpe_ratios[i, j+1] <- cal_sharpe(w_internal[j,i,], mu[i,], Sigma[i,,])
}
sharpe_rp[i] <- cal_sharpe(unlist(w_rp[i,-1]), mu[i,], Sigma[i,,])
}
n_factors <- ncol(factors[,-1])
n <- nrow(factors)-35-1
w_matrix_rp <- matrix(NA, nrow = n, ncol = n_factors)
for(i in 1:n){
factors_period_tmp <- factors[i:(i+35),-1]
volatility <- (factors_period_tmp %>%
summarise(across(c(MKT_EU_US, SMB_EU_US, MOM_EU_US, MKT_EU_EU, SMB_EU_EU, MOM_EU_EU), ~sd(.x)))) %>%
as.numeric()
w_matrix_rp[i,] <- 1/volatility/sum(1/volatility)
}
w_rp <- as_tibble(w_matrix_rp)
names(w_rp) <- names(factors[, -1])
w_rp <- w_rp %>%
mutate(.before = 1, date = factors$date[37:nrow(factors)])
round(w_rp, 3)
factors_return_calc <- factors[37:nrow(factors),]
return_rp <- rowSums(w_rp[,-1]*factors_return_calc[,-1])
mean(return_rp)
colors_pal <- colorRampPalette(c("#D55E00", "#0072B2"))(7)
k <- 1
cumulative_return_rp <- (cumprod(1+return_rp/100)-1)*100
cumulative_return_mv_chosen <- cumulative_return_internal[,k]
colors_pal <- colorRampPalette(c("#D55E00", "#0072B2"))(7)
k <- n
return_min_var[k]
return_max_return[k]
# return for perioden
cumulative_return_min_var <- (cumprod(1+return_min_var/100)-1)*100
cumulative_return_max_return <- (cumprod(1+return_max_return/100)-1)*100
cumulative_return_market <- (cumprod(1+factors_period$MKT_EU_EU/100)-1)*100
cumulative_return_min_var[k]/n
cumulative_return_max_return[k]/n
sd(return_min_var)
sd(return_max_return)
cumulative_return_df <- tibble(
"Date" = factors_period$date,
"Min_var" = cumulative_return_min_var,
"Max_return" = cumulative_return_max_return,
"Current_strategy" =  cumulative_return_market
)
cumulative_return_df %>%
pivot_longer(cols = -Date, names_to = "Portfolio", values_to = "Cumulated_returns") %>%
mutate(Date = ym(Date)) %>%
ggplot(aes(Date, Cumulated_returns, color = Portfolio)) +
geom_line(linewidth = 1) +
theme_bw() +
ggtitle("Cumulative returns") +
ylab("Cumulative returns") +
scale_color_manual(
name = "Portfolio Type",
breaks = c("Max_return", "Min_var", "Current_strategy"),
labels = c("Maximum Return", "Minimum Variance", "Current strategy"),
values = c("Max_return" = "#0072B2", "Min_var" = "#D55E00", "Current_strategy" = "#009E73")
)
Breaks = c("Max_return", "Min_var", "Current_strategy")
labels = c("Max Return", "GMV", "EE")
values = c("Max_return" = colors_pal[7], "Min_var" = colors_pal[1], "Current_strategy" = "#009E73")
cumulative_return_df %>%
pivot_longer(cols = -Date, names_to = "Portfolio", values_to = "Cumulative_return") %>%
mutate(Date = ym(Date)) %>%
ggplot(aes(x = Date, y = Cumulative_return, color = Portfolio)) +
geom_line(linewidth = 0.8) +
scale_color_manual(
name = "Portfolio",
breaks = Breaks,
labels = labels,
values =  values
) +
labs(
title = "Cumulative Returns",
#subtitle = "",
x = "Date",
y = "Cumulative Return",
color = "Portfolio"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
legend.position = c(0.02, 0.98),
legend.justification = c(0, 1),
legend.title = element_text(face = "bold"),
legend.background = element_rect(
fill = "white",
color = "grey80"
),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")
)
cumulative_return_internal <- array(NA, c(n, n_internal))
for(i in 1:n_internal){
cumulative_return_internal[,i] <- (cumprod(1+return_internal[,i]/100)-1)*100
}
cumulative_return_df <- data.frame(
cumulative_return_min_var,
cumulative_return_internal,
cumulative_return_max_return,
cumulative_return_market
)
new_names <- c("Minimum variance", paste("point", 1:5), "Maximum return", "European Equity")
colnames(cumulative_return_df) <- new_names
values <- c(colorRampPalette(c("#D55E00", "#0072B2"))(7), "#009E73")
labels <- c("GMV", paste("Pf", 1:5, sep = " "), "Max Return", "EE")
plot_data <- cumulative_return_df %>%
mutate(Date = ym(factors_period$date)) %>%
pivot_longer(
cols = -Date,
names_to = "Portfolio",
values_to = "Cumulative_Return"
) %>%
mutate(Portfolio = factor(Portfolio, levels = new_names))
ggplot(plot_data, aes(x = Date, y = Cumulative_Return, color = Portfolio)) +
geom_line(linewidth = 0.45) +
geom_point(shape = NA) +
scale_color_manual(values = values, labels = labels) +
guides(color = guide_legend(override.aes = list(
shape = 15,    # 15 is the code for a solid square
size = 4,      # Adjust size as needed
linetype = 0   # This hides the line
))) +
labs(
title = "Cumulative Returns of Efficient Frontier Portfolios",
#subtitle = "Performance of portfolios from Minimum Variance to Maximum Return",
x = "Date",
y = "Cumulative Return",
color = "Portfolio"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 13),
plot.subtitle = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold", size = 11),
axis.title.y = element_text(face = "bold", size = 11)
)
c(min(cumulative_return_internal[k,]), max(cumulative_return_internal[k,]))
c(min(cumulative_return_internal[k,]/n), max(cumulative_return_internal[k,]/n))
c(min(apply(return_internal, 2, sd)), max(apply(return_internal, 2, sd)))
which.max(cumulative_return_internal[k,])
which.min(sd(cumulative_return_internal[k,]))
cal_var <- function(w, Sigma){
return(t(w)%*%Sigma%*%w)
}
cal_return <- function(w, mu){
return(sum(w*mu))
}
cal_sharpe <- function(w, mu, Sigma){
return(cal_return(w, mu)/sqrt(cal_var(w, Sigma)))
}
sharpe_ratios <- array(NA, c(208, 7))
sharpe_rp <- rep(NA, 208)
for(i in 1:208){
sharpe_ratios[i, 1] <- cal_sharpe(w_min_var[i,], mu[i,], Sigma[i,,])
sharpe_ratios[i, 7] <- cal_sharpe(w_max_return[i,], mu[i,], Sigma[i,,])
for(j in 1:5){
sharpe_ratios[i, j+1] <- cal_sharpe(w_internal[j,i,], mu[i,], Sigma[i,,])
}
sharpe_rp[i] <- cal_sharpe(unlist(w_rp[i,-1]), mu[i,], Sigma[i,,])
}
mean(sharpe_EE) # EE
colMeans(sharpe_ratios) # MV
mean(sharpe_rp) # RP
mean(returns_choice$return)/sd(returns_choice$return)*sqrt(12)
colors_pal <- colorRampPalette(c("#D55E00", "#0072B2"))(7)
k <- 1
cumulative_return_rp <- (cumprod(1+return_rp/100)-1)*100
cumulative_return_mv_chosen <- cumulative_return_internal[,k]
round(cumulative_return_rp[n], 0)-round(cumulative_return_mv_chosen[n], 0)
round(cumulative_return_rp[n]/n, 2) - round(cumulative_return_mv_chosen[n]/n, 2)
round(sd(return_rp), 2)-round(sd(return_internal[,k]), 2)
rp_df <- tibble(
Date = ym(factors_return_calc$date),
"Risk_parity" = cumulative_return_rp,
"Portfolio_1" = cumulative_return_mv_chosen,
"Current_strategy" =  cumulative_return_market
)
Breaks = c("Risk_parity", "Portfolio_1", "Current_strategy")
labels = c("RP","PF 1", "EE")
values = c("Risk_parity" = "#613F99", "Portfolio_1" = colors_pal[2], "Current_strategy" = "#009E73")
rp_df %>%
pivot_longer(cols = -Date, names_to = "Portfolio", values_to = "Cumulative_Return") %>%
ggplot(aes(x = Date, y = Cumulative_Return, color = Portfolio)) +
geom_line(linewidth = 0.7) +
scale_color_manual(
name = "Portfolio",
breaks = Breaks,
labels = labels,
values =  values
) +
labs(
title = "Cumulative Returns of Risk parity and Portfolio 1",
x = "Date",
y = "Cumulative Return"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 13),
plot.subtitle = element_text(size = 12),
legend.position = c(0.02, 0.98),
legend.justification = c(0, 1),
legend.title = element_text(face = "bold"),
legend.background = element_rect(
fill = "white",
color = "grey80"
),
axis.title.x = element_text(face = "bold", size = 11),
axis.title.y = element_text(face = "bold", size = 11)
)
# df <- tibble(date = factors_return_calc$date, return = return_internal[,1])
# saveRDS(df, "returns_choice.rds")
returns_all <- cbind(
factors$date,
return_min_var,
return_internal,
return_max_return
) %>%
as.tibble()
new_names <- c("date", "min_var", paste("Portfolio ", 1:5), "max_return")
colnames(returns_all) <- new_names
cumulative_returns_all <- returns_all %>%
mutate(across(2:8, ~(cumprod(1+.x/100)-1))*100)
summary_table <- cumulative_returns_all %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Cumulative_return") %>%
mutate(Portfolio = factor(Portfolio, levels = new_names)) %>%
group_by(Portfolio) %>%
summarise(
"Cumulative_return_end" = last(Cumulative_return),
"Mean_return" = Cumulative_return_end/n
)
volatility <- returns_all %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Returns") %>%
mutate(Portfolio = factor(Portfolio, levels = new_names)) %>%
group_by(Portfolio) %>%
summarise(Volatility = sd(Returns))
summary_table <- left_join(summary_table, volatility, by = "Portfolio")
summary_table <- rbind(summary_table, tibble(
Portfolio = "Risk_parity",
Cumulative_return_end = cumulative_return_rp[n],
Mean_return = cumulative_return_rp[n]/n,
Volatility = sd(return_rp)
))
returns_choice <- tibble(
date = returns_all$date,
"return" = returns_all$`Portfolio  2`
)
cal_var <- function(w, Sigma){
return(t(w)%*%Sigma%*%w)
}
cal_return <- function(w, mu){
return(sum(w*mu))
}
cal_sharpe <- function(w, mu, Sigma){
return(cal_return(w, mu)/sqrt(cal_var(w, Sigma)))
}
sharpe_ratios <- array(NA, c(208, 7))
sharpe_rp <- rep(NA, 208)
for(i in 1:208){
sharpe_ratios[i, 1] <- cal_sharpe(w_min_var[i,], mu[i,], Sigma[i,,])
sharpe_ratios[i, 7] <- cal_sharpe(w_max_return[i,], mu[i,], Sigma[i,,])
for(j in 1:5){
sharpe_ratios[i, j+1] <- cal_sharpe(w_internal[j,i,], mu[i,], Sigma[i,,])
}
sharpe_rp[i] <- cal_sharpe(unlist(w_rp[i,-1]), mu[i,], Sigma[i,,])
}
mean(sharpe_EE) # EE
colMeans(sharpe_ratios) # MV
mean(sharpe_rp) # RP
mean(returns_choice$return)/sd(returns_choice$return)*sqrt(12)
j <- ((1+returns_choice$return/100)^12-1)*100
mean(log(1+returns_choice$return/100))/sd(log(1+returns_choice$return/100))*sqrt(12)
# Out of sample
cum_return(returns_choice$return)[208]
# Out of sample
cum_return(returns_choice$return)[209]
# Out of sample
cum_return(returns_choice$return)[208]
returns_all <- cbind(
factors$date,
return_min_var,
return_internal,
return_max_return
) %>%
as.tibble()
new_names <- c("date", "min_var", paste("Portfolio ", 1:5), "max_return")
colnames(returns_all) <- new_names
cumulative_returns_all <- returns_all %>%
mutate(across(2:8, ~(cumprod(1+.x/100)-1))*100)
summary_table <- cumulative_returns_all %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Cumulative_return") %>%
mutate(Portfolio = factor(Portfolio, levels = new_names)) %>%
group_by(Portfolio) %>%
summarise(
"Cumulative_return_end" = last(Cumulative_return),
"Mean_return" = Cumulative_return_end/n
)
volatility <- returns_all %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Returns") %>%
mutate(Portfolio = factor(Portfolio, levels = new_names)) %>%
group_by(Portfolio) %>%
summarise(Volatility = sd(Returns))
summary_table <- left_join(summary_table, volatility, by = "Portfolio")
summary_table <- rbind(summary_table, tibble(
Portfolio = "Risk_parity",
Cumulative_return_end = cumulative_return_rp[n],
Mean_return = cumulative_return_rp[n]/n,
Volatility = sd(return_rp)
))
returns_choice <- tibble(
date = returns_all$date,
"return" = returns_all$`Portfolio  1`
)
returns_choice
returns_all
# Out of sample
mean(returns_choice$return)/sd(returns_choice$return)
# Out of sample
mean(returns_choice$return)/sd(returns_choice$return)*sqrt(12)
# Out of sample
annul_returns <- function(returns){
return(((1+returns/100)^12-1)*100)
}
annul_returns(returns_choice$return)
mean(annul_returns(returns_choice$return))/sd(annul_returns(returns_choice$return))
RF.EU
RF.EU
filter(RF.EU, TIME_PERIOD >= as_date(2007-09-01))
returns_choice
filter(RF.EU, TIME_PERIOD >= as_date(2007-08-01) & TIME_PERIOD <= 2022-01-01)
filter(RF.EU, TIME_PERIOD >= as_date(2007-08-01) & TIME_PERIOD <= as_date(2022-01-01))
as_date(2022-01-01)
as_date(2007-08-01)
as_date("2007-08-01")
filter(RF.EU, TIME_PERIOD >= as_date("2007-08-01") & TIME_PERIOD <= as_date("2022-01-01"))
returns_choice
filter(RF.EU, TIME_PERIOD >= as_date("2007-08-01") & TIME_PERIOD <= as_date("2022-01-01"))
returns_choice
cumulative_return_internal
return_min_var
factors_period
returns_all <- cbind(
factors_period$date,
return_min_var,
return_internal,
return_max_return
) %>%
as.tibble()
returns_all
returns_all <- cbind(
factors_period$date,
return_min_var,
return_internal,
return_max_return
) %>%
as.tibble()
new_names <- c("date", "min_var", paste("Portfolio ", 1:5), "max_return")
colnames(returns_all) <- new_names
cumulative_returns_all <- returns_all %>%
mutate(across(2:8, ~(cumprod(1+.x/100)-1))*100)
summary_table <- cumulative_returns_all %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Cumulative_return") %>%
mutate(Portfolio = factor(Portfolio, levels = new_names)) %>%
group_by(Portfolio) %>%
summarise(
"Cumulative_return_end" = last(Cumulative_return),
"Mean_return" = Cumulative_return_end/n
)
volatility <- returns_all %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Returns") %>%
mutate(Portfolio = factor(Portfolio, levels = new_names)) %>%
group_by(Portfolio) %>%
summarise(Volatility = sd(Returns))
summary_table <- left_join(summary_table, volatility, by = "Portfolio")
summary_table <- rbind(summary_table, tibble(
Portfolio = "Risk_parity",
Cumulative_return_end = cumulative_return_rp[n],
Mean_return = cumulative_return_rp[n]/n,
Volatility = sd(return_rp)
))
returns_choice <- tibble(
date = returns_all$date,
"return" = returns_all$`Portfolio  1`
)
returns_choice
returns_choice <- readRDS("returns_choice.rds")
returns_choice
returns_choice <- readRDS("returns_choice.rds")
returns_choice <- readRDS("returns_choice.rds")
cal_var <- function(w, Sigma){
return(t(w)%*%Sigma%*%w)
}
cal_return <- function(w, mu){
return(sum(w*mu))
}
cal_sharpe <- function(w, mu, Sigma){
return(cal_return(w, mu)/sqrt(cal_var(w, Sigma)))
}
sharpe_ratios <- array(NA, c(208, 7))
sharpe_rp <- rep(NA, 208)
for(i in 1:208){
sharpe_ratios[i, 1] <- cal_sharpe(w_min_var[i,], mu[i,], Sigma[i,,])
sharpe_ratios[i, 7] <- cal_sharpe(w_max_return[i,], mu[i,], Sigma[i,,])
for(j in 1:5){
sharpe_ratios[i, j+1] <- cal_sharpe(w_internal[j,i,], mu[i,], Sigma[i,,])
}
sharpe_rp[i] <- cal_sharpe(unlist(w_rp[i,-1]), mu[i,], Sigma[i,,])
}
mean(sharpe_EE) # EE
colMeans(sharpe_ratios) # MV
mean(sharpe_rp) # RP
mean(returns_choice$return)/sd(returns_choice$return)*sqrt(12)
j <- ((1+returns_choice$return/100)^12-1)*100
mean(log(1+returns_choice$return/100))/sd(log(1+returns_choice$return/100))*sqrt(12)
# Out of sample
annul_returns <- function(returns){
return(((1+returns/100)^12-1)*100)
}
filter(RF.EU, TIME_PERIOD >= as_date("2007-08-01") & TIME_PERIOD <= as_date("2022-01-01"))
mean(returns_choice$return-RF.EU)/sd(returns_choice$return)
filter(RF.EU, TIME_PERIOD >= as_date("2007-08-01") & TIME_PERIOD <= as_date("2022-01-01"))
returns_choice
filter(RF.EU, TIME_PERIOD >= as_date("2007-08-01") & TIME_PERIOD <= as_date("2025-01-01"))
filter(RF.EU, TIME_PERIOD >= as_date("2007-08-01") & TIME_PERIOD <= as_date("2024-01-01"))
mean(returns_choice$return-RF.EU)/sd(returns_choice$return)
filter(RF.EU, TIME_PERIOD >= as_date("2007-08-01") & TIME_PERIOD <= as_date("2024-01-01"))
filter(RF.EU, TIME_PERIOD >= as_date("2007-08-01") & TIME_PERIOD <= as_date("2024-12-01"))
RF_period <- filter(RF.EU, TIME_PERIOD >= as_date("2007-08-01") & TIME_PERIOD <= as_date("2024-12-01"))
mean(returns_choice$return-RF_period$return)/sd(returns_choice$return - RF_period$return)
mean(return_min_var)
mean(return_max_return)
sd(return_max_return)
