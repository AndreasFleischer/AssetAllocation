names(excess_portfolios_us),
~ {
model <- lm(excess_portfolios_us[[.x]] ~ reg_data_us$MKTmRF + reg_data_us$SMB + reg_data_us$MOM)
# Coefficients and t-stats
coef_df <- tidy(model) %>%
mutate(
Portfolio = .x,
t_stat = estimate / std.error
) %>%
select(Portfolio, term, estimate, t_stat)
# R² and adjusted R² — from glance()
model_stats <- glance(model) %>%
select(r.squared, adj.r.squared)
# Add R² columns to every coefficient row (for completeness)
coef_df <- coef_df %>%
mutate(
r.squared = model_stats$r.squared,
adj.r.squared = model_stats$adj.r.squared
)
coef_df
}
)
# Clean up and reorder columns
ff25_results_us <- ff25_results_us %>%
mutate(term = recode(term,
"(Intercept)" = "Alpha",
"reg_data_us$MKTmRF" = "MKT",
"reg_data_us$SMB" = "SMB",
"reg_data_us$MOM" = "MOM")) %>%
arrange(Portfolio, match(term, c("Alpha", "MKT", "SMB", "MOM")))
# Pivot wider to make a clean report-style table
ff25_table_us <- ff25_results_us %>%
tidyr::pivot_wider(
names_from = term,
values_from = c(estimate, t_stat),
names_glue = "{term}_{.value}"
) %>%
select(
Portfolio,
starts_with("Alpha_"),
starts_with("MKT_"),
starts_with("SMB_"),
starts_with("MOM_"),
r.squared,
adj.r.squared
)
# View results
ff25_table_us
reg_data_eu <- data.frame(
date = MKT_EU_EU$date,
MKTmRF = MKT_EU_EU$Mkt,
SMB = SMB_EU_EU_long$SMB,
MOM = MOM_EU_EU_long$MOM) %>%
filter(date <= 202412) %>%
mutate(MKTmRF = MKTmRF - All_years$return,
RF = All_years$return)
# The regressions
ff25_results <- map_dfr(
names(excess_portfolios_eu),
~ {
model <- lm(excess_portfolios_eu[[.x]] ~ reg_data_eu$MKTmRF + reg_data_eu$SMB + reg_data_eu$MOM)
tidy(model) %>%
mutate(
Portfolio = .x,
t_stat = estimate / std.error
) %>%
select(Portfolio, term, estimate, t_stat)
}
)
# Arrange nicely
ff25_results <- ff25_results %>%
mutate(term = recode(term,
"(Intercept)" = "Alpha",
"reg_data_eu$MKTmRF" = "MKT",
"reg_data_eu$SMB" = "SMB",
"reg_data_eu$MOM" = "MOM")) %>%
arrange(Portfolio, match(term, c("Alpha", "MKT", "SMB", "MOM")))
# (Optional) Pivot wider for a report-style table
ff25_table <- ff25_results %>%
tidyr::pivot_wider(
names_from = term,
values_from = c(estimate, t_stat),
names_glue = "{term}_{.value}"
)
# View results
ff25_table
round(ff25_table$MOM_t_stat,2)
recommended_factors_long <- data.frame(SMB_US = SMB_EU_EU_long$SMB[1:244]-All_years$return,
MOM_US = MOM_EU_US_long$MOM[1:244]-All_years$return,
SMB_EU = SMB_EU_EU_long$SMB[1:244]-All_years$return,
MOM_EU = MOM_EU_EU_long$MOM[1:244]-All_years$return)
round(colMeans(recommended_factors_long),3)
round(cov(recommended_factors_long),3)
all_factors_long <- data.frame(MKT_US = MKT_EU_US$Mkt[1:244]-All_years$return,
SMB_US = SMB_EU_US_long$SMB[1:244],
MOM_US = MOM_EU_US_long$MOM[1:244],
MKT_EU = MKT_EU_EU$Mkt[1:244]-All_years$return,
SMB_EU = SMB_EU_EU_long$SMB[1:244],
MOM_EU = MOM_EU_EU_long$MOM[1:244])
round(cor(all_factors_long),2)
round(cov(all_factors_long),2)
factor.df <- data.frame(SMB_us = SMB_EU_US$SMB,
MOM_us = MOM_EU_US$MOM,
SMB_eu = SMB_EU_EU$SMB,
MOM_eu = MOM_EU_EU$MOM)
rowSums(factor.df)
plot(rowSums(factor.df))
mean(rowSums(factor.df))
all_factors_long
mean(rowSums(all_factors_long))
plot(rowSums(all_factors_long))
knitr::opts_chunk$set(
echo = TRUE,
fig.width=10, fig.height=5
)
library(tidyverse)
library(frenchdata)
library(ggplot2)
library(quadprog)
library(lubridate)
library(lpSolve)
library(xtable)
library(Rsolnp)
data_sets = get_french_data_list() # All the datasets in the package
# US stocks
# Nr 1 er månedlige returns
# Nr 2 er årlige returns
ff_3_factors <- download_french_data("Fama/French 3 Factors") # Download of data
# f_3_factors$subsets$data[[2]] # How to extract dataset
# browse_details_page(ff_3_factors) # Details of the dataset
size_mom_6 <- download_french_data("6 Portfolios Formed on Size and Momentum (2 x 3)")
size_mom_25 <- download_french_data("25 Portfolios Formed on Size and Momentum (5 x 5)")
# EU stocks in US dollars
size_mom_6_euro <- download_french_data("6 European Portfolios Formed on Size and Momentum (2 x 3)")
size_mom_25_euro <- download_french_data("25 European Portfolios Formed on Size and Momentum (5 x 5)")
# Other
exchange_rate <- read_csv("Data AA/eurofxref-hist.csv")
Exchange_rate_US <- exchange_rate %>%
filter(Date >= "2004-09-01", Date <= "2025-08-31") %>%
select(c("Date", "USD"))
Exchange_rate_US <- Exchange_rate_US[nrow(Exchange_rate_US):1,]
Exchange_rate_US <- Exchange_rate_US %>%
mutate(Date = floor_date(Date, " month")) %>%
group_by(Date) %>%
summarise(USD = mean(USD))
RF.EU <- read_rds("All_years_ready.rds")
RF.EU <- select(RF.EU, c("TIME_PERIOD", "return"))
factors <- read_rds("new_factors_all.rds")
readRDS("returns_choice.rds")
l <- readRDS("returns_choice.rds")
mean(rowSums(l[,-1]))
guarantees_trigger_target
guarantees
returns_choice
min(returns_choice[,-1])
abs(min(returns_choice[,-1]))/100
1/(abs(min(returns_choice[,-1]))/100)
(abs(min(returns_choice[,-1]))/100)
1/(abs(min(returns_choice[,-1]))/100)
min(returns_choice[,-1])
B <- map(guarantees, 3)
K <- map(guarantees, 1)
# Rækker er start på periode
# Søjler er parameter kombination
# short_fall er andelen af alle perioder, hvor man falder under floor
short_fall <- array(NA, dim = c(ncol(B[[1]]), length(B)))
guarantees_m <- rep(NA, length(K))
for(i in 1:length(B)){
short_fall[,i] <- (colSums(B[[i]] <= 0) > 0)
guarantees_m[i] <- min(K[[i]])
}
guarantees_m
for(i in 1:length(B)){
short_fall[,i] <- (colSums(B[[i]] <= 0) > 0)
guarantees_min[i] <- min(K[[i]])
}
guarantees_min <- rep(NA, length(K))
for(i in 1:length(B)){
short_fall[,i] <- (colSums(B[[i]] <= 0) > 0)
guarantees_min[i] <- min(K[[i]])
}
guarantees_min
length(B)
K
apply(K, min)
apply(K, min)
sapply(K, min)
# 1. Create a dataframe with the m_group and min_value for EACH element
min_df <- K %>%
imap_dfr(~ {
m_group <- str_split(.y, "x", simplify = TRUE)[1]
tibble(
m_group = m_group,
min_value = min(.x)
)
})
# 2. Group by m_group and calculate the mean of the minimums
mean_of_mins_df <- min_df %>%
group_by(m_group) %>%
summarize(
mean_of_mins = mean(min_value),
count = n()
) %>%
mutate(m_group = as.numeric(m_group)) %>%
arrange(m_group)
print(mean_of_mins_df)
sapply(K, min)
sapply(K, min)[1:30]
sapply(K, min)[1:50]
sapply(K, min)[1:94]
sapply(K, min)[1:95]
sapply(K, min)[1:100]
sapply(K, min)[1:110]
sapply(K, min)[1:106]
mean(sapply(K, min)[1:106])
print(mean_of_mins_df)
mean(sapply(K, min)[1:106])
sapply(K, min)[1:106]
sapply(K, min)[1:106]
min_df
# 1. Create the detailed 'min_df' dataframe
min_df <- K %>%
imap_dfr(~ {
# .y is the name (e.g., "7x1.25x1.3"), .x is the vector
parts <- str_split(.y, "x", simplify = TRUE)
tibble(
m = parts[1],
Target = parts[2],
Trigger = parts[3],
min_value = min(.x)
)
})
# Print the resulting min_df
print(min_df)
# 2. Group and summarize (this code is the same as before)
mean_of_mins_df <- min_df %>%
group_by(m_group) %>%
summarize(
mean_of_mins = mean(min_value),
count = n()
) %>%
mutate(m_group = as.numeric(m_group)) %>%
arrange(m_group)
# 2. Group and summarize (this code is the same as before)
mean_of_mins_df <- min_df %>%
group_by(m) %>%
summarize(
mean_of_mins = mean(min_value),
count = n()
) %>%
mutate(m_group = as.numeric(m_group)) %>%
arrange(m_group)
# 2. Group and summarize (this code is the same as before)
mean_of_mins_df <- min_df %>%
group_by(m) %>%
summarize(
mean_of_mins = mean(min_value),
count = n()
) %>%
mutate(m = as.numeric(m)) %>%
arrange(m)
# Print the final aggregated dataframe
print(mean_of_mins_df)
# 2. Group and summarize (this code is the same as before)
mean_of_mins_df <- min_df %>%
group_by(m) %>%
summarize(
mean_of_mins = mean(min_value)
) %>%
mutate(m = as.numeric(m)) %>%
arrange(m)
# Print the final aggregated dataframe
print(mean_of_mins_df)
short_fall_df %>%
pivot_longer(cols = everything(), names_to = "m", values_to = "Short_fall_prop") %>%
group_by(m) %>%
summarise(short_fall_prop_m = mean(Short_fall_prop)) %>%
arrange(as.numeric(m)) %>%
left_join(guarantees_m_plot_df, by = "m") %>%
ggplot(aes(as.numeric(m), short_fall_prop_m)) +
geom_point() +
geom_point(aes(y = mean_of_mins_df$mean_of_mins/100))
short_fall_df %>%
pivot_longer(cols = everything(), names_to = "m", values_to = "Short_fall_prop") %>%
group_by(m) %>%
summarise(short_fall_prop_m = mean(Short_fall_prop)) %>%
arrange(as.numeric(m)) %>%
left_join(guarantees_m_plot_df, by = "m") %>%
ggplot(aes(as.numeric(m), short_fall_prop_m)) +
geom_point() +
geom_point(aes(y = mean_of_mins_df$mean_of_mins/100), col = "red")
short_fall_df %>%
pivot_longer(cols = everything(), names_to = "m", values_to = "Short_fall_prop") %>%
group_by(m) %>%
summarise(short_fall_prop_m = mean(Short_fall_prop)) %>%
arrange(as.numeric(m)) %>%
left_join(guarantees_m_plot_df, by = "m") %>%
ggplot(aes(as.numeric(m), short_fall_prop_m)) +
geom_point() +
geom_point(aes(y = mean_of_mins_df$mean_of_mins/150), col = "red")
short_fall_df %>%
pivot_longer(cols = everything(), names_to = "m", values_to = "Short_fall_prop") %>%
group_by(m) %>%
summarise(short_fall_prop_m = mean(Short_fall_prop)) %>%
arrange(as.numeric(m)) %>%
left_join(guarantees_m_plot_df, by = "m") %>%
ggplot(aes(as.numeric(m), short_fall_prop_m)) +
geom_point() +
geom_point(aes(y = mean_of_mins_df$mean_of_mins/1000), col = "red")
short_fall_df
short_fall_df %>%
pivot_longer(cols = everything(), names_to = "m", values_to = "Short_fall_prop") %>%
group_by(m) %>%
summarise(short_fall_prop_m = mean(Short_fall_prop)) %>%
arrange(as.numeric(m))
mean_of_mins_df
short_fall_df %>%
pivot_longer(cols = everything(), names_to = "m", values_to = "Short_fall_prop") %>%
group_by(m) %>%
summarise(short_fall_prop_m = mean(Short_fall_prop)) %>%
arrange(as.numeric(m)) %>%
left_join(mean_of_mins_df, by = "m")
short_fall_df %>%
pivot_longer(cols = everything(), names_to = "m", values_to = "Short_fall_prop") %>%
group_by(m) %>%
summarise(short_fall_prop_m = mean(Short_fall_prop)) %>%
arrange(as.numeric(m)) %>%
left_join(mean_of_mins_df, by = m)
mean_of_mins_df
short_fall_df %>%
pivot_longer(cols = everything(), names_to = "m", values_to = "Short_fall_prop") %>%
group_by(m) %>%
summarise(short_fall_prop_m = mean(Short_fall_prop)) %>%
arrange(as.numeric(m))
short_fall_df_2 <- short_fall_df %>%
pivot_longer(cols = everything(), names_to = "m", values_to = "Short_fall_prop") %>%
group_by(m) %>%
summarise(short_fall_prop_m = mean(Short_fall_prop)) %>%
arrange(as.numeric(m))
short_fall_df_2$m <- as.numeric(short_fall_df_2$m)
short_fall_df_2
left_join(short_fall_df_2, mean_of_mins_df, by = date)
mean_of_mins_df
short_fall_df %>%
pivot_longer(cols = everything(), names_to = "m", values_to = "Short_fall_prop") %>%
group_by(m) %>%
summarise(short_fall_prop_m = mean(Short_fall_prop)) %>%
arrange(as.numeric(m)) %>%
cbind(mean_of_mins_df$mean_of_mins)
df_cleaned <- short_fall_df %>%
pivot_longer(cols = everything(), names_to = "m", values_to = "Short_fall_prop") %>%
group_by(m) %>%
summarise(short_fall_prop_m = mean(Short_fall_prop)) %>%
arrange(as.numeric(m)) %>%
cbind(mean_of_mins_df$mean_of_mins) %>%
rename(mean_of_mins = `mean_of_mins_df$mean_of_mins`) %>%
mutate(m = as.numeric(m))
df_cleaned
scale_factor <- max(df_cleaned$short_fall_prop_m) / max(df_cleaned$mean_of_mins)
ggplot(df_cleaned, aes(x = m)) +
geom_line(aes(y = short_fall_prop_m, color = "Shortfall Prop"), size = 1.2) +
geom_point(aes(y = short_fall_prop_m), color = "#0072B2", size = 2.5) +
geom_line(aes(y = mean_of_mins * scale_factor, color = "Mean of Mins"), size = 1.2) +
geom_point(aes(y = mean_of_mins * scale_factor), color = "#D55E00", size = 2.5) +
scale_y_continuous(
name = "Shortfall Probability",
labels = scales::percent_format(accuracy = 0.01),
sec.axis = sec_axis(
trans = ~ . / scale_factor,
name = "Mean of Mins"
)
) +
scale_color_manual(
name = "Metric",
values = c("Shortfall Prop" = "#0072B2", "Mean of Mins" = "#D55E00")
) +
labs(
title = "Shortfall Probability vs. Mean of Mins by Multiplier",
x = "Multiplier (m)"
) +
theme_minimal() +
theme(legend.position = "top")
m <- 1
L_target <- 125/100
L_trigger <- 130/100
returns_choice <- readRDS("returns_choice.rds")
mkt_EU_period <- MKT_EU_EU %>% filter(date >= 200709 & date <= 202412)
colnames(mkt_EU_period) <- c("date", "return")
guarantees_choice <- CPPI(m, L_target, L_trigger, returns_choice)
guarantees_EU_equity <- CPPI(m, L_target, L_trigger, mkt_EU_period)
guarantees_recommended <- CPPI(2.5, 1.34, 1.46, returns_choice)
guarantee_df <- data.frame(date = All_years$TIME_PERIOD[36:124],
"Portfolio 1" = guarantees_choice$Guarantee_end,
"European Equity" = guarantees_EU_equity$Guarantee_end,
"Portfolio 1 Recommended" = guarantees_recommended$Guarantee_end)
guarantee_df %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Guarantee") %>%
ggplot(aes(x = as.Date(date), y = Guarantee, color = Portfolio)) +
geom_line(size = 1.1) +
geom_point(size = 2, alpha = 0.7) +
# geom_line(color = "#0072B2", size = 1.1) +
# geom_point(color = "#0072B2", size = 2, alpha = 0.7) +
scale_color_manual(values = c("Portfolio.1"           = "#0072B2",
"European.Equity"       = "#D55E00",
"Portfolio.1.Recommended" = "#009E73"),
breaks=c("Portfolio.1", "European.Equity", "Portfolio.1.Recommended"),
labels=c("Portfolio 1", "European Equity", "Portfolio 1 recommended strat")) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
scale_y_continuous(labels = scales::number_format(accuracy = 0.01)) +
labs(
title = "Development of the Portfolio Guarantee Over Time",
subtitle = "Guarantee level implied by CPPI floor mechanism",
x = "Date",
y = "Guarantee Value"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 11, hjust = 0.5, color = "gray40"),
axis.title = element_text(face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()
)
m <- 1
L_target <- 125/100
L_trigger <- 130/100
returns_choice <- readRDS("returns_choice.rds")
mkt_EU_period <- MKT_EU_EU %>% filter(date >= 200709 & date <= 202412)
colnames(mkt_EU_period) <- c("date", "return")
guarantees_choice <- CPPI(m, L_target, L_trigger, returns_choice)
guarantees_EU_equity <- CPPI(m, L_target, L_trigger, mkt_EU_period)
guarantees_recommended <- CPPI(2.5, 1.25, 1.3, returns_choice)
guarantee_df <- data.frame(date = All_years$TIME_PERIOD[36:124],
"Portfolio 1" = guarantees_choice$Guarantee_end,
"European Equity" = guarantees_EU_equity$Guarantee_end,
"Portfolio 1 Recommended" = guarantees_recommended$Guarantee_end)
guarantee_df %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Guarantee") %>%
ggplot(aes(x = as.Date(date), y = Guarantee, color = Portfolio)) +
geom_line(size = 1.1) +
geom_point(size = 2, alpha = 0.7) +
# geom_line(color = "#0072B2", size = 1.1) +
# geom_point(color = "#0072B2", size = 2, alpha = 0.7) +
scale_color_manual(values = c("Portfolio.1"           = "#0072B2",
"European.Equity"       = "#D55E00",
"Portfolio.1.Recommended" = "#009E73"),
breaks=c("Portfolio.1", "European.Equity", "Portfolio.1.Recommended"),
labels=c("Portfolio 1", "European Equity", "Portfolio 1 recommended strat")) +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
scale_y_continuous(labels = scales::number_format(accuracy = 0.01)) +
labs(
title = "Development of the Portfolio Guarantee Over Time",
subtitle = "Guarantee level implied by CPPI floor mechanism",
x = "Date",
y = "Guarantee Value"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
plot.subtitle = element_text(size = 11, hjust = 0.5, color = "gray40"),
axis.title = element_text(face = "bold"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()
)
ggplot(df_cleaned, aes(x = m)) +
geom_line(aes(y = short_fall_prop_m, color = "Shortfall Prop"), size = 1.2) +
geom_point(aes(y = short_fall_prop_m), color = "#0072B2", size = 2.5) +
geom_line(aes(y = mean_of_mins * scale_factor, color = "Mean of Mins"), size = 1.2) +
geom_point(aes(y = mean_of_mins * scale_factor), color = "#D55E00", size = 2.5) +
scale_y_continuous(
name = "Shortfall Probability",
labels = scales::percent_format(accuracy = 0.01),
sec.axis = sec_axis(
trans = ~ . / scale_factor,
name = "Mean of Mins"
)
) +
scale_x_continuous(breaks = seq(1, 20, by = 2)) +
scale_color_manual(
name = "Metric",
values = c("Shortfall Prop" = "#0072B2", "Mean of Mins" = "#D55E00")
) +
labs(
title = "Shortfall Probability vs. Mean of Mins by Multiplier",
x = "Multiplier (m)"
) +
theme_minimal() +
theme(legend.position = "top")
ggplot(df_cleaned, aes(x = m)) +
geom_line(aes(y = short_fall_prop_m, color = "Shortfall Prop"), size = 1.2) +
geom_point(aes(y = short_fall_prop_m), color = "#0072B2", size = 2.5) +
geom_line(aes(y = mean_of_mins * scale_factor, color = "Mean of Mins"), size = 1.2) +
geom_point(aes(y = mean_of_mins * scale_factor), color = "#D55E00", size = 2.5) +
scale_y_continuous(
name = "Shortfall Probability",
labels = scales::percent_format(accuracy = 0.01),
sec.axis = sec_axis(
trans = ~ . / scale_factor,
name = "Minimum guarantee"
)
) +
scale_x_continuous(breaks = seq(1, 20, by = 2)) +
scale_color_manual(
name = "Metric",
values = c("Shortfall Prop" = "#0072B2", "Mean of Mins" = "#D55E00")
) +
labs(
title = "Shortfall Probability vs. Mean of Mins by Multiplier",
x = "Multiplier (m)"
) +
theme_minimal() +
theme(legend.position = "top")
