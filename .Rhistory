library(frenchdata)
library(ggplot2)
library(quadprog)
library(lubridate)
library(lpSolve)
library(xtable)
library(Rsolnp)
library(patchwork)
data_sets = get_french_data_list() # All the datasets in the package
# US stocks
# Nr 1 er månedlige returns
# Nr 2 er årlige returns
ff_3_factors <- download_french_data("Fama/French 3 Factors") # Download of data
# f_3_factors$subsets$data[[2]] # How to extract dataset
# browse_details_page(ff_3_factors) # Details of the dataset
size_mom_6 <- download_french_data("6 Portfolios Formed on Size and Momentum (2 x 3)")
size_mom_25 <- download_french_data("25 Portfolios Formed on Size and Momentum (5 x 5)")
# EU stocks in US dollars
size_mom_6_euro <- download_french_data("6 European Portfolios Formed on Size and Momentum (2 x 3)")
size_mom_25_euro <- download_french_data("25 European Portfolios Formed on Size and Momentum (5 x 5)")
# Other
exchange_rate <- read_csv("Data AA/eurofxref-hist.csv")
Exchange_rate_US <- exchange_rate %>%
filter(Date >= "2004-09-01", Date <= "2025-08-31") %>%
select(c("Date", "USD"))
Exchange_rate_US <- Exchange_rate_US[nrow(Exchange_rate_US):1,]
Exchange_rate_US <- Exchange_rate_US %>%
mutate(Date = floor_date(Date, " month")) %>%
group_by(Date) %>%
summarise(USD = mean(USD))
RF.EU <- read_rds("All_years_ready.rds")
RF.EU <- select(RF.EU, c("TIME_PERIOD", "return"))
factors <- read_rds("new_factors_all.rds")
returns_choice <- readRDS("returns_choice.rds")
optimize_portfolio <- function(excess_returns, cov_period){
n_assets <- length(excess_returns)
Dmat <- cov_period
dvec <- rep(0, n_assets)
Amat <- cbind(rep(1, n_assets), diag(n_assets))
bvec <- c(
1,                   # The value for the first constraint (sum(...) = 1)
rep(0, n_assets)     # The values for the w_i >= 0 constraints
)
meq <- 1
sol<- solve.QP(Dmat = Dmat,
dvec = dvec,
Amat = Amat,
bvec = bvec,
meq = meq)
w <- sol$solution/sum(sol$solution)
return(w)
}
optimize_internal <- function(excess_returns, cov_period, target_return){
n_assets <- length(excess_returns)
Dmat <- cov_period
dvec <- rep(0, n_assets)
Amat <- cbind(excess_returns, rep(1, n_assets), diag(n_assets))
bvec <- c(                   # The value for the first constraint (sum(...) = 1)
target_return,
1,
rep(0, n_assets)     # The values for the w_i >= 0 constraints
)
meq <- 1
sol<- solve.QP(Dmat = Dmat,
dvec = dvec,
Amat = Amat,
bvec = bvec,
meq = meq)
w <- sol$solution/sum(sol$solution)
return(w)
}
optimize_return <- function(excess_returns){
n_assets <- length(excess_returns)
objective.in <- excess_returns
const.mat <- matrix(rep(1, n_assets), nrow = 1)
const.dir <- "=="
const.rhs <- 1
solution <- lp(
direction = "max",
objective.in = objective.in,
const.mat = const.mat,
const.dir = const.dir,
const.rhs = const.rhs
)
return(solution$solution)
}
cum_return <- function(x){
return(
(cumprod(1+x/100)-1)*100
)
}
factors_excess_return <- sweep(factors[,-1], 1, RF.EU$return, "-")
factors_excess_return <- cbind(factors$date, factors_excess_return)
n_assets <- ncol(factors_excess_return[,-1])
n <- nrow(factors_excess_return) - 35 - 1
w_min_var <- matrix(NA, nrow = n, ncol = n_assets)
w_max_return <- matrix(NA, nrow = n, ncol = n_assets)
n_internal <- 5
w_internal <- array(NA, dim = c(n_internal, n, n_assets))
target_returns <- array(NA, c(n, n_internal))
Sigma <- array(NA, c(n, n_assets, n_assets))
mu <- array(NA, c(n, n_assets))
sharpe_EE <- rep(NA, n)
for(i in 1:n){
excess_returns_period <- factors_excess_return[i:(i+35),-1]
mu[i,] <- colMeans(excess_returns_period)
Sigma[i,,] <- cov(excess_returns_period)
w_min_var[i,] <- optimize_portfolio(mu[i,], Sigma[i,,])
w_max_return[i,] <- optimize_return(mu[i,])
return_min_var <- sum(mu[i,]*w_min_var[i,])
return_max_return <- sum(mu[i,]*w_max_return[i,])
target_returns_tmp <- seq(return_min_var, return_max_return, (return_max_return - return_min_var)/(n_internal+1))
target_returns[i,] <- target_returns_tmp[-c(1, length(target_returns_tmp))]
for(j in 1:length(target_returns[i,])){
w_internal[j,i,] <- optimize_internal(mu[i,], Sigma[i,,], target_returns[i,j])
}
sharpe_EE[i] <- mean(excess_returns_period$MKT_EU_EU)/sd(excess_returns_period$MKT_EU_EU)
}
colnames(w_min_var) <- colnames(factors[,-1])
current_dimnames <- dimnames(w_internal)
current_dimnames[[3]] <- colnames(factors[,-1])
dimnames(w_internal) <- current_dimnames
colnames(w_max_return) <- colnames(factors[,-1])
factors_period <- factors[37:nrow(factors),]
return_min_var <- rowSums(w_min_var*factors_period[,-1])
return_max_return <- rowSums(w_max_return*factors_period[,-1])
return_internal <- array(NA, c(n, n_internal))
for(i in 1:n_internal){
return_internal[,i] <- rowSums(w_internal[i,,]*factors_period[,-1])
}
colors_pal <- colorRampPalette(c("#D55E00", "#0072B2"))(7)
k <- n
# return for perioden
cumulative_return_min_var <- (cumprod(1+return_min_var/100)-1)*100
cumulative_return_max_return <- (cumprod(1+return_max_return/100)-1)*100
cumulative_return_market <- (cumprod(1+factors_period$MKT_EU_EU/100)-1)*100
cumulative_return_df <- tibble(
"Date" = factors_period$date,
"Min_var" = cumulative_return_min_var,
"Max_return" = cumulative_return_max_return,
"Current_strategy" =  cumulative_return_market
)
Breaks = c("Max_return", "Min_var", "Current_strategy")
labels = c("Max Return", "GMV", "EE")
values = c("Max_return" = colors_pal[7], "Min_var" = colors_pal[1], "Current_strategy" = "#009E73")
cumulative_return_df %>%
pivot_longer(cols = -Date, names_to = "Portfolio", values_to = "Cumulative_return") %>%
mutate(Date = ym(Date)) %>%
ggplot(aes(x = Date, y = Cumulative_return, color = Portfolio)) +
geom_line(linewidth = 0.8) +
scale_color_manual(
name = "Portfolio",
breaks = Breaks,
labels = labels,
values =  values
) +
labs(
title = "Cumulative Returns",
#subtitle = "",
x = "Date",
y = "Cumulative Return",
color = "Portfolio"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
legend.position = c(0.02, 0.98),
legend.justification = c(0, 1),
legend.title = element_text(face = "bold"),
legend.background = element_rect(
fill = "white",
color = "grey80"
),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")
)
cumulative_return_internal <- array(NA, c(n, n_internal))
for(i in 1:n_internal){
cumulative_return_internal[,i] <- (cumprod(1+return_internal[,i]/100)-1)*100
}
cumulative_return_df <- data.frame(
cumulative_return_min_var,
cumulative_return_internal,
cumulative_return_max_return,
cumulative_return_market
)
new_names <- c("Minimum variance", paste("point", 1:5), "Maximum return", "European Equity")
colnames(cumulative_return_df) <- new_names
values <- c(colorRampPalette(c("#D55E00", "#0072B2"))(7), "#009E73")
labels <- c("GMV", paste("Pf", 1:5, sep = " "), "Max Return", "EE")
plot_data <- cumulative_return_df %>%
mutate(Date = ym(factors_period$date)) %>%
pivot_longer(
cols = -Date,
names_to = "Portfolio",
values_to = "Cumulative_Return"
) %>%
mutate(Portfolio = factor(Portfolio, levels = new_names))
ggplot(plot_data, aes(x = Date, y = Cumulative_Return, color = Portfolio)) +
geom_line(linewidth = 0.45) +
geom_point(shape = NA) +
scale_color_manual(values = values, labels = labels) +
guides(color = guide_legend(override.aes = list(
shape = 15,    # 15 is the code for a solid square
size = 4,      # Adjust size as needed
linetype = 0   # This hides the line
))) +
labs(
title = "Cumulative Returns of Efficient Frontier Portfolios",
#subtitle = "Performance of portfolios from Minimum Variance to Maximum Return",
x = "Date",
y = "Cumulative Return",
color = "Portfolio"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 13),
plot.subtitle = element_text(size = 12),
legend.position = "right",
legend.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold", size = 11),
axis.title.y = element_text(face = "bold", size = 11)
)
n_factors <- ncol(factors[,-1])
n <- nrow(factors)-35-1
w_matrix_rp <- matrix(NA, nrow = n, ncol = n_factors)
for(i in 1:n){
factors_period_tmp <- factors[i:(i+35),-1]
volatility <- (factors_period_tmp %>%
summarise(across(c(MKT_EU_US, SMB_EU_US, MOM_EU_US, MKT_EU_EU, SMB_EU_EU, MOM_EU_EU), ~sd(.x)))) %>%
as.numeric()
w_matrix_rp[i,] <- 1/volatility/sum(1/volatility)
}
w_rp <- as_tibble(w_matrix_rp)
names(w_rp) <- names(factors[, -1])
w_rp <- w_rp %>%
mutate(.before = 1, date = factors$date[37:nrow(factors)])
round(w_rp, 3)
factors_return_calc <- factors[37:nrow(factors),]
return_rp <- rowSums(w_rp[,-1]*factors_return_calc[,-1])
colors_pal <- colorRampPalette(c("#D55E00", "#0072B2"))(7)
k <- 1
cumulative_return_rp <- (cumprod(1+return_rp/100)-1)*100
cumulative_return_mv_chosen <- cumulative_return_internal[,k]
rp_df <- tibble(
Date = ym(factors_return_calc$date),
"Risk_parity" = cumulative_return_rp,
"Portfolio_1" = cumulative_return_mv_chosen,
"Current_strategy" =  cumulative_return_market
)
Breaks = c("Risk_parity", "Portfolio_1", "Current_strategy")
labels = c("RP","PF 1", "EE")
values = c("Risk_parity" = "#613F99", "Portfolio_1" = colors_pal[2], "Current_strategy" = "#009E73")
rp_df %>%
pivot_longer(cols = -Date, names_to = "Portfolio", values_to = "Cumulative_Return") %>%
ggplot(aes(x = Date, y = Cumulative_Return, color = Portfolio)) +
geom_line(linewidth = 0.7) +
scale_color_manual(
name = "Portfolio",
breaks = Breaks,
labels = labels,
values =  values
) +
labs(
title = "Cumulative Returns of Risk parity and Portfolio 1",
x = "Date",
y = "Cumulative Return"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 13),
plot.subtitle = element_text(size = 12),
legend.position = c(0.02, 0.98),
legend.justification = c(0, 1),
legend.title = element_text(face = "bold"),
legend.background = element_rect(
fill = "white",
color = "grey80"
),
axis.title.x = element_text(face = "bold", size = 11),
axis.title.y = element_text(face = "bold", size = 11)
)
# Findes i US-US
all_factors <- data.frame(date = factors$date,
MKT_US = MKT_EU_US$Mkt[1:244],
SMB_US = SMB_EU_US$SMB[1:244],
MOM_US = MOM_EU_US$MOM[1:244],
MKT_EU = MKT_EU_EU$Mkt[1:244],
SMB_EU = SMB_EU_EU$SMB[1:244],
MOM_EU = MOM_EU_EU$MOM[1:244],
RF = RF.EU$return)
returns_all <- all_factors %>% filter(date >= 200409 & date <= 202412)
optimize_portfolio_shorting <- function(excess_returns, cov_period, alpha){
n_assets <- length(excess_returns)
Dmat <- cov_period
dvec <- rep(0, n_assets)
Amat <- cbind(c(1, alpha, alpha, 1, alpha, alpha), diag(n_assets))
bvec <- c(
1,                   # The value for the first constraint (sum(...) = 1)
rep(0, n_assets)     # The values for the w_i >= 0 constraints
)
meq <- 1
sol<- solve.QP(Dmat = Dmat,
dvec = dvec,
Amat = Amat,
bvec = bvec,
meq = meq)
w <- sol$solution
return(w)
}
optimize_internal_shorting <- function(excess_returns, cov_period, target_return, alpha){
n_assets <- length(excess_returns)
Dmat <- cov_period
dvec <- rep(0, n_assets)
Amat <- cbind(excess_returns, c(1, alpha, alpha, 1, alpha, alpha), diag(n_assets))
bvec <- c(                   # The value for the first constraint (sum(...) = 1)
target_return,
1,
rep(0, n_assets)     # The values for the w_i >= 0 constraints
)
meq <- 1
sol<- solve.QP(Dmat = Dmat,
dvec = dvec,
Amat = Amat,
bvec = bvec,
meq = meq)
w <- sol$solution
return(w)
}
optimize_return_shorting <- function(excess_returns, alpha){
n_assets <- length(excess_returns)
objective.in <- excess_returns
const.mat <- matrix(c(1, alpha, alpha, 1, alpha, alpha), nrow = 1)
const.dir <- "=="
const.rhs <- 1
solution <- lp(
direction = "max",
objective.in = objective.in,
const.mat = const.mat,
const.dir = const.dir,
const.rhs = const.rhs
)
return(solution$solution)
}
cum_return <- function(x){
return(
(cumprod(1+x/100)-1)*100
)
}
optimize_with_shorting <- function(alpha, returns){
excess_returns <- sweep(returns, 1, returns$RF, "-")
returns_tmp <- excess_returns %>%
# mutate(
#   SMB_US = SMB_US + alpha*RF,
#   MOM_US = MOM_US + alpha*RF,
#   SMB_EU = SMB_EU + alpha*RF,
#   MOM_EU = MOM_EU + alpha*RF
# ) %>%
select(-RF)
factor_names <- colnames(returns_tmp[,-1])
n_assets <- ncol(returns_tmp[,-1])
n <- nrow(returns_tmp) - 35 - 1
w_min_var <- matrix(NA, nrow = n, ncol = n_assets)
w_max_return <- matrix(NA, nrow = n, ncol = n_assets)
RF <- rep(NA, n)
n_internal <- 20
w_internal <- array(NA, dim = c(n_internal, n, n_assets))
target_returns <- array(NA, c(n, n_internal))
Sigma <- array(NA, c(n, n_assets, n_assets))
mu <- array(NA, c(n, n_assets))
for(i in 1:n){
RF[i] <- mean(returns$RF[i:(i+35)])
returns_period <- returns_tmp[i:(i+35),-1]
mu[i,] <- colMeans(returns_period)
Sigma[i,,] <- cov(returns_period)
w_min_var[i,] <- optimize_portfolio_shorting(mu[i,], Sigma[i,,], alpha)
w_max_return[i,] <- optimize_return_shorting(mu[i,], alpha)
return_min_var <- sum(mu[i,]*w_min_var[i,])
return_max_return <- sum(mu[i,]*w_max_return[i,])
target_returns_tmp <- seq(return_min_var, return_max_return, (return_max_return - return_min_var)/(n_internal+1))
target_returns[i,] <- target_returns_tmp[-c(1, length(target_returns_tmp))]
for(j in 1:length(target_returns[i,])){
w_internal[j,i,] <- optimize_internal_shorting(mu[i,], Sigma[i,,], target_returns[i,j], alpha)
}
}
w = array(NA, c(n_internal+2, dim(w_min_var)[1], dim(w_min_var)[2]))
w[1,,] <- w_min_var
w[2:(n_internal+1),,] <- w_internal
w[(n_internal+2),,] <- w_max_return
current_dimnames <- dimnames(w)
current_dimnames[[3]] <- factor_names
dimnames(w) <- current_dimnames
factors_out_of_bag <- returns[37:nrow(returns),]
returns_out_of_bag <- returns_in_bag <-array(NA, c(n, dim(w)[[1]]))
for(i in 1:dim(w)[[1]]){
returns_out_of_bag[,i] <- rowSums(w[i,,]*factors_out_of_bag[,2:7]) + rowSums(alpha*w[i,,c("SMB_US","MOM_US", "SMB_EU", "MOM_EU")])*factors_out_of_bag[,"RF"]
returns_in_bag[,i] <- rowSums(w[i,,]*mu) + rowSums(alpha*w[i,,c("SMB_US","MOM_US", "SMB_EU", "MOM_EU")])*returns[36:(nrow(returns)-1),"RF"]
}
Portfolio_names <- c("GMV", paste("Point", 1:n_internal, sep = " "), "Max_return")
returns_in_bag <- as_tibble(returns_in_bag)
returns_out_of_bag <- as_tibble(returns_out_of_bag)
colnames(returns_in_bag) <- Portfolio_names
colnames(returns_out_of_bag) <- Portfolio_names
return(
list(
"w" = w,
"returns_in_bag" = returns_in_bag,
"returns_out_of_bag" = returns_out_of_bag,
"Sigma" = Sigma,
"mu" = mu,
"RF" = RF
)
)
}
returns_choice <- readRDS("returns_choice.rds")
n <- 208
target_variance <- rep(0, n)
for(i in 1:n){
target_variance[i] <- t(w_internal[1,i,])%*%Sigma[i,,]%*%w_internal[1,i,]
}
alpha <- 1
h <- optimize_with_shorting(alpha, returns_all)
apply(h$returns_out_of_bag, 2, cum_return) %>%
as_tibble() %>%
cbind(tibble(date = 1:208)) %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "cum_return") %>% ggplot(aes(date, cum_return, color = Portfolio)) +
geom_line()
var_short_in_bag <- array(NA, c(208, 22))
sd_short_out_bag <- rep(NA, 22)
for(j in 1:22){
for(i in 1:208){
var_short_in_bag[i,j] <- t(h$w[j,i,])%*%h$Sigma[i,,]%*%h$w[j,i,]
}
sd_short_out_bag[j] <- sd(unlist(h$returns_out_of_bag[,j]))
}
print("cumulative return")
apply(h$returns_out_of_bag, 2, cum_return)[208,]
cum_return(returns_choice$return)[208]
print("mean return")
((1+colMeans(h$returns_out_of_bag/100))^12-1)*100
((1+mean(returns_choice$return/100))^12-1)*100
print("volatilitet")
sd_short_out_bag
sd(returns_choice$return)
index_target_var <- rowSums(var_short_in_bag <= target_variance)
w_target_var <- array(NA, c(208, 6))
for(i in 1:208){
w_target_var[i,] <- h$w[index_target_var[i], i,]
}
print("Mean Expected returns Target variance")
mean(rowSums(mu*w_target_var + rowSums(alpha*w_target_var[,c(2, 3, 5, 6)])*h$RF))
print("Difference in mean expected return")
mean(rowSums(mu*w_target_var + rowSums(alpha*w_target_var[,c(2, 3, 5, 6)])*h$RF)) - mean(mu)
print("Out of bag returns target variance")
returns_target_var <- rowSums(w_target_var*returns_all[37:nrow(returns_all),2:7]) + rowSums(alpha*w_target_var[,c(2, 3, 5, 6)]*returns_all[37:nrow(returns_all), 8])
returns_tmp <- array(NA, c(n, 3))
returns_tmp[,3] <- returns_target_var
returns_alpha <- cbind(returns_tmp, returns_choice$return)
cum_returns_alpha <- apply(returns_alpha, 2, cum_return)
cum_returns_alpha <- as_tibble(cbind(returns_choice$date, cum_returns_alpha))
colnames(cum_returns_alpha) <- c("date", "alpha_1", "alpha_0.5", "alpha_0.25", "Portfolio_1")
cum_returns_alpha %>%
pivot_longer(cols = -date, names_to = "Portfolio", values_to = "Return") %>%
filter(date <= 201101) %>%
ggplot(aes(ym(date), Return, color = Portfolio)) +
geom_line(linewidth = 1.2) +
xlab("Date") +
ggtitle("Performance of shorting strategies under financial crisis", "2007-2011") +
scale_color_discrete(
labels = c(
"Portfolio_1" = "Portfolio 1",
"alpha_1" = "alpha = 1",
"alpha_0.5" = "alpha = 0.5",
"alpha_0.25" = "alpha = 0.25"
)
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 16),
legend.title = element_text(face = "bold", size = 10),
legend.position = "bottom",
# legend.position = c(0.95, 0.95),
# legend.justification = c("right", "top"),
# legend.background = element_rect(
#   fill = "white",
#   color = "grey80"
# )
)
returns_choice <- readRDS("returns_choice.rds")
cal_var <- function(w, Sigma){
return(t(w)%*%Sigma%*%w)
}
cal_return <- function(w, mu){
return(sum(w*mu))
}
cal_sharpe <- function(w, mu, Sigma){
return(cal_return(w, mu)/sqrt(cal_var(w, Sigma)))
}
sharpe_ratios <- array(NA, c(208, 7))
sharpe_rp <- rep(NA, 208)
for(i in 1:208){
sharpe_ratios[i, 1] <- cal_sharpe(w_min_var[i,], mu[i,], Sigma[i,,])
sharpe_ratios[i, 7] <- cal_sharpe(w_max_return[i,], mu[i,], Sigma[i,,])
for(j in 1:5){
sharpe_ratios[i, j+1] <- cal_sharpe(w_internal[j,i,], mu[i,], Sigma[i,,])
}
sharpe_rp[i] <- cal_sharpe(unlist(w_rp[i,-1]), mu[i,], Sigma[i,,])
}
mean(sharpe_EE) # EE
colMeans(sharpe_ratios) # MV
mean(sharpe_rp) # RP
