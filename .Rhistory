names(guarantees_trigger_target) <- new_names
wealth <- map(guarantees_trigger_target, "W")
last_row_list <- lapply(wealth, function(x) x[nrow(x), ])
wealth_df <- tibble(date = All_years$TIME_PERIOD[36:124]) %>%
cbind(last_row_list)
wealth_df %>%
pivot_longer(cols = -date, names_to = "parameters", values_to = "guarantee") %>%
ggplot(aes(date, guarantee, color = parameters)) +
geom_line()
wealth_df %>%
pivot_longer(cols = -date, names_to = "parameters", values_to = "guarantee") %>%
ggplot(aes(date, guarantee, color = parameters)) +
geom_line() +
scale_color_viridis_d(option = "D")
scale_color_viridis_d
wealth_df %>%
pivot_longer(cols = -date, names_to = "parameters", values_to = "guarantee") %>%
ggplot(aes(date, guarantee, color = parameters)) +
geom_line() +
scale_color_viridis_d(option = "cividis")
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 7.5
L_target <- 125/100
L_trigger <- seq(130, 230, 1)/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
guarantees_trigger_target <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
guarantees_trigger_target[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(guarantees_trigger_target) <- new_names
wealth <- map(guarantees_trigger_target, "W")
last_row_list <- lapply(wealth, function(x) x[nrow(x), ])
wealth_df <- tibble(date = All_years$TIME_PERIOD[36:124]) %>%
cbind(last_row_list)
wealth_df %>%
pivot_longer(cols = -date, names_to = "parameters", values_to = "guarantee") %>%
ggplot(aes(date, guarantee, color = parameters)) +
geom_line() +
scale_color_viridis_d(option = "cividis")
wealth_df %>%
pivot_longer(cols = -date, names_to = "parameters", values_to = "guarantee") %>%
ggplot(aes(date, guarantee, color = parameters)) +
geom_line() +
scale_color_viridis_d(option = "cividis") +
theme(legend.position = "none")
wealth
wealth_df
colMeans(wealth_df[,-1])
plot(colMeans(wealth_df[,-1]))
df <- tibble(new_names = string_vector)
df <- tibble(strings = new_names)
df
# 3. Use 'extract' to split the string into new columns
# "(\\d+)" is a regular expression for "one or more digits"
# 'convert = TRUE' automatically makes M, K, and L numeric
df_with_diff <- df %>%
extract(strings,
into = c("m", "Target", "Trigger"),
"(\\d+)x(\\d+)x(\\d+)",
convert = TRUE) %>%
mutate(Difference = Trigger - Target)
df_with_diff
df
df %>%
extract(strings,
into = c("m", "Target", "Trigger"),
"(\\d+)x(\\d+)x(\\d+)",
convert = TRUE)
# 3. Use 'extract' to split the string into new columns
# "(\\d+)" is a regular expression for "one or more digits"
# 'convert = TRUE' automatically makes M, K, and L numeric
df_with_diff <- df %>%
extract(strings,
into = c("m", "Target", "Trigger"),
"(\\d+)x(\\d+)x(\\d+)",
convert = TRUE) %>%
mutate(Difference = Trigger - Target)
# 3. Use 'extract' to split the string into new columns
# "(\\d+)" is a regular expression for "one or more digits"
# 'convert = TRUE' automatically makes M, K, and L numeric
df_with_diff <- df %>%
extract(strings,
into = c("M", "K", "L"),
"(\\d+)x(\\d+)x(\\d+)",
convert = TRUE) %>%
mutate(Difference = L - K)
df_with_diff
df
# 3. Use 'extract' to split the string into new columns
# "(\\d+)" is a regular expression for "one or more digits"
# 'convert = TRUE' automatically makes M, K, and L numeric
df_with_diff <- df %>%
extract(strings,
into = c("m", "Target", "Trigger"),
# This regex now matches decimals
"([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE) %>%
mutate(Difference = L - K)
# 3. Use 'extract' to split the string into new columns
# "(\\d+)" is a regular expression for "one or more digits"
# 'convert = TRUE' automatically makes M, K, and L numeric
df_with_diff <- df %>%
extract(strings,
into = c("m", "Target", "Trigger"),
# This regex now matches decimals
"([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE) %>%
mutate(Difference = Trigger - Target)
df_with_diff
colnames(wealth_df)
colnames(wealth_df) <- c("date", df_with_diff$Difference)
wealth_df
colnames(wealth_df) <- c("date", round(df_with_diff$Difference, 3))
wealth_df
plot(colMeans(wealth_df))
plot(colMeans(wealth_df[,-1]))
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 7.5
L_target <- seq(105, 200, 5)/100
L_trigger <- seq(110, 205, 5)/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger & L_trigger - L_target <= 0.3)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
guarantees <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
guarantees[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(guarantees) <- new_names
# guarantees <- readRDS("E:/OneDrive - University of Copenhagen/Aktuar/5. år/Asset allocation/Exam project/CPPI strats.rds")
plot_df <- as.tibble(map(guarantees, 1))
plot_df <- cbind(tibble(date = All_years$TIME_PERIOD[36:124]), plot_df)
colnames(plot_df) <- c("date", new_names)
# plot_df %>%
#   pivot_longer(cols = -date, names_to = "CPPI_strat", values_to = "Guarantee") %>%
#   ggplot(aes(x = as.Date(date), y = Guarantee, color = CPPI_strat)) +
#     geom_line(size = 1.1) +
#     geom_point(size = 2, alpha = 0.7) +
#     # geom_line(color = "#0072B2", size = 1.1) +
#     # geom_point(color = "#0072B2", size = 2, alpha = 0.7) +
#     # scale_color_manual(values = c("Portfolio.1" = "#0072B2", "European.Equity" = "#D55E00"),
#     #                    breaks=c("Portfolio.1", "European.Equity"),
#     #                    labels=c("Portfolio 1", "European Equity")) +
#     scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
#     scale_y_continuous(labels = scales::number_format(accuracy = 0.01)) +
#     labs(
#       title = "Development of the Portfolio Guarantee Over Time",
#       subtitle = "Guarantee level implied by CPPI floor mechanism",
#       x = "Date",
#       y = "Guarantee Value"
#     ) +
#   scale_color_viridis_d(option = "cividis") +
#     theme_minimal(base_size = 13) +
#     theme(
#       plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
#       plot.subtitle = element_text(size = 11, hjust = 0.5, color = "gray40"),
#       axis.title = element_text(face = "bold"),
#       panel.grid.minor = element_blank(),
#       panel.grid.major.x = element_blank(),
#       legend.position = "none"
#     )
guarantees
wealth_df <- map(guarantees, "W")
wealth_df
wealth <- map(guarantees, "W")
wealth <- map(guarantees, "W")
last_row_list <- lapply(wealth, function(x) x[nrow(x), ])
wealth_df <- tibble(date = All_years$TIME_PERIOD[36:124]) %>%
cbind(last_row_list)
wealth_df
wealth <- map(guarantees_trigger_target, "W")
last_row_list <- lapply(wealth, function(x) x[nrow(x), ])
wealth_df <- tibble(date = All_years$TIME_PERIOD[36:124]) %>%
cbind(last_row_list)
df <- tibble(strings = new_names)
# 3. Use 'extract' to split the string into new columns
# "(\\d+)" is a regular expression for "one or more digits"
# 'convert = TRUE' automatically makes M, K, and L numeric
df_with_diff <- df %>%
extract(strings,
into = c("m", "Target", "Trigger"),
# This regex now matches decimals
"([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE) %>%
mutate(Difference = Trigger - Target)
colnames(wealth_df) <- c("date", round(df_with_diff$Difference, 3))
plot(colMeans(wealth_df[,-1]))
wealth_df
wealth <- map(guarantees, "W")
last_row_list <- lapply(wealth, function(x) x[nrow(x), ])
wealth_df <- tibble(date = All_years$TIME_PERIOD[36:124]) %>%
cbind(last_row_list)
wealth_df
wealth_df <- colMeans(wealth_df[,-1])
wealth_df
plot(wealth_df)
wealth_df
new_names
df <- tibble(strings = new_names)
df_with_diff <- df %>%
extract(strings,
into = c("m", "Target", "Trigger"),
"([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE) %>%
mutate(Difference = Trigger - Target)
df_with_diff
paste(df_with_diff$Target, df_with_diff$Difference, sep = "x")
paste(df_with_diff$Target, round(df_with_diff$Difference, 3), sep = "x")
colnames(wealth_df) <- c("date", paste(df_with_diff$Target, round(df_with_diff$Difference, 3), sep = "x"))
wealth_df
names(wealth_df) <- c("date", paste(df_with_diff$Target, round(df_with_diff$Difference, 3), sep = "x"))
plot_data <- enframe(wealth_df, name = "name_str", value = "y_value") %>%
extract(
name_str,
into = c("m", "Target", "Trigger"),
regex = "([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE
) %>%
mutate(x_diff = Trigger - Target)
ggplot(plot_data, aes(x = x_diff, y = y_value, color = as.factor(Target))) +
geom_point(size = 2.5) +
labs(
title = "Value vs. (Trigger - Target) Difference",
x = "Difference (Trigger - Target)",
y = "Value",
color = "Target"
) +
theme_minimal()
guarantees <- readRDS("E:/OneDrive - University of Copenhagen/Aktuar/5. år/Asset allocation/Exam project/CPPI strats.rds")
wealth <- map(guarantees, "W")
wealth <- wealth[which(startsWith(new_names, paste(7.5, "x", sep = "")))]
wealth
wealth <- map(guarantees, "W")
new_names <- names(wealth)
new_names
wealth <- wealth[which(startsWith(new_names, paste(7.5, "x", sep = "")))]
wealth
last_row_list <- lapply(wealth, function(x) x[nrow(x), ])
wealth_df <- tibble(date = All_years$TIME_PERIOD[36:124]) %>%
cbind(last_row_list)
wealth_df
wealth_df <- colMeans(wealth_df[,-1])
plot_data <- enframe(wealth_df, name = "name_str", value = "y_value") %>%
extract(
name_str,
into = c("m", "Target", "Trigger"),
regex = "([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE
) %>%
mutate(x_diff = Trigger - Target)
ggplot(plot_data, aes(x = x_diff, y = y_value, color = as.factor(Target))) +
geom_point(size = 2.5) +
labs(
title = "Value vs. (Trigger - Target) Difference",
x = "Difference (Trigger - Target)",
y = "Value",
color = "Target"
) +
theme_minimal()
ggplot(plot_data, aes(x = x_diff, y = y_value, color = as.factor(Target))) +
geom_point(size = 2.5) +
labs(
title = "Value vs. (Trigger - Target) Difference",
x = "Difference (Trigger - Target)",
y = "Value",
color = "Target"
) +
theme_minimal() +
scale_color_viridis_d(option = "E")
ggplot(plot_data, aes(x = x_diff, y = y_value, color = as.factor(Target))) +
geom_line() +
labs(
title = "Value vs. (Trigger - Target) Difference",
x = "Difference (Trigger - Target)",
y = "Value",
color = "Target"
) +
theme_minimal() +
scale_color_viridis_d(option = "E")
m <- 7.5
L_target <- seq(105, 225, 1)/100
L_trigger <- seq(130, 230, 1)/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
search_grid
L_target <- seq(105, 225, 2)/100
L_trigger <- seq(130, 230, 2)/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
search_grid
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 7.5
L_target <- seq(105, 225, 2)/100
L_trigger <- seq(130, 230, 2)/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
guarantees_trigger_target <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
guarantees_trigger_target[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(guarantees_trigger_target) <- new_names
wealth <- map(guarantees_trigger_target, "W")
last_row_list <- lapply(wealth, function(x) x[nrow(x), ])
wealth_df <- tibble(date = All_years$TIME_PERIOD[36:124]) %>%
cbind(last_row_list)
df <- tibble(strings = new_names)
# 3. Use 'extract' to split the string into new columns
# "(\\d+)" is a regular expression for "one or more digits"
# 'convert = TRUE' automatically makes M, K, and L numeric
df_with_diff <- df %>%
extract(strings,
into = c("m", "Target", "Trigger"),
# This regex now matches decimals
"([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE) %>%
mutate(Difference = Trigger - Target)
colnames(wealth_df) <- c("date", round(df_with_diff$Difference, 3))
# wealth_df %>%
#   pivot_longer(cols = -date, names_to = "parameters", values_to = "guarantee") %>%
#   ggplot(aes(date, guarantee, color = parameters)) +
#     geom_line() +
#     scale_color_viridis_d(option = "cividis") +
#     theme(legend.position = "none")
wealth_df
wealth <- map(guarantees_trigger_target, "W")
last_row_list <- lapply(wealth, function(x) x[nrow(x), ])
wealth_df <- tibble(date = All_years$TIME_PERIOD[36:124]) %>%
cbind(last_row_list)
wealth_df
plot_data <- enframe(wealth_df, name = "name_str", value = "y_value") %>%
extract(
name_str,
into = c("m", "Target", "Trigger"),
regex = "([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE
) %>%
mutate(x_diff = Trigger - Target)
wealth_df
plot_data <- enframe(colMeans(wealth_df[,-1]), name = "name_str", value = "y_value") %>%
extract(
name_str,
into = c("m", "Target", "Trigger"),
regex = "([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE
) %>%
mutate(x_diff = Trigger - Target)
ggplot(plot_data, aes(x = x_diff, y = y_value, color = as.factor(Target))) +
geom_line() +
labs(
title = "Value vs. (Trigger - Target) Difference",
x = "Difference (Trigger - Target)",
y = "Value",
color = "Target"
) +
theme_minimal() +
scale_color_viridis_d(option = "E")
plot_data
ggplot(plot_data, aes(x = x_diff, y = y_value, color = as.factor(Target))) +
geom_line() +
labs(
title = "Value vs. (Trigger - Target) Difference",
x = "Difference (Trigger - Target)",
y = "Value",
color = "Target"
) +
theme_minimal() +
scale_color_viridis_d(option = "E")
wealth_df
plot_data
plot_data <- enframe(colMeans(wealth_df[,-1]), name = "name_str", value = "wealth") %>%
extract(
name_str,
into = c("m", "Target", "Trigger"),
regex = "([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE
) %>%
mutate(x_diff = Trigger - Target)
plot_data %>%
group_by(x_diff) %>%
summarise(mean_wealth = mean(wealth))
plot_data %>%
group_by(round(x_diff, 2)) %>%
summarise(mean_wealth = mean(wealth))
plot_data %>%
group_by(round(x_diff, 2)) %>%
summarise(mean_wealth = mean(wealth)) %>%
ggplot(aes(round(x_diff, 2), mean_wealth)) +
geom_line()
plot_data %>%
group_by(round(x_diff, 2)) %>%
summarise(mean_wealth = mean(wealth)) %>%
ggplot(aes("round(x_diff, 2)", mean_wealth)) +
geom_line()
plot_data %>%
group_by(round(x_diff, 2)) %>%
summarise(mean_wealth = mean(wealth))
plot_data %>%
group_by(x_diff = round(x_diff, 2)) %>%
summarise(mean_wealth = mean(wealth)) %>%
ggplot(aes(x_diff, mean_wealth)) +
geom_line()
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 7.5
L_target <- 125/100
L_trigger <- seq(130, 230, 1)/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
guarantees_trigger_target <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
guarantees_trigger_target[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(guarantees_trigger_target) <- new_names
wealth <- map(guarantees_trigger_target, "W")
last_row_list <- lapply(wealth, function(x) x[nrow(x), ])
wealth_df <- tibble(date = All_years$TIME_PERIOD[36:124]) %>%
cbind(last_row_list)
df <- tibble(strings = new_names)
# 3. Use 'extract' to split the string into new columns
# "(\\d+)" is a regular expression for "one or more digits"
# 'convert = TRUE' automatically makes M, K, and L numeric
df_with_diff <- df %>%
extract(strings,
into = c("m", "Target", "Trigger"),
# This regex now matches decimals
"([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE) %>%
mutate(Difference = Trigger - Target)
colnames(wealth_df) <- c("date", round(df_with_diff$Difference, 3))
plot(colMeans(wealth_df[,-1]))
# wealth_df %>%
#   pivot_longer(cols = -date, names_to = "parameters", values_to = "guarantee") %>%
#   ggplot(aes(date, guarantee, color = parameters)) +
#     geom_line() +
#     scale_color_viridis_d(option = "cividis") +
#     theme(legend.position = "none")
returns_choice <- readRDS("returns_choice.rds")
# m <- seq(1, 20, 0.5)
m <- 7.5
L_target <- 105/100
L_trigger <- seq(110, 230, 1)/100
search_grid = expand.grid(m = m, "L_target" = L_target, "L_trigger" = L_trigger) %>%
filter(L_target < L_trigger)
search_grid <- sort_by(search_grid, ~list(m, L_target, L_trigger))
new_names <- apply(search_grid, 1, paste, collapse = "x")
# set1 <- m
# set2 <- L_target*100
# set3 <- L_trigger*100
# all_combinations_df <- expand.grid(set1, set2, set3)
# new_names <- apply(all_combinations_df, 1, paste, collapse = "x")
guarantees_trigger_target <- vector(mode = "list", length = nrow(search_grid))
for(i in 1:nrow(search_grid)){
guarantees_trigger_target[[i]] <- CPPI(search_grid[i,1], search_grid[i,2], search_grid[i,3], returns_choice)
}
names(guarantees_trigger_target) <- new_names
wealth <- map(guarantees_trigger_target, "W")
last_row_list <- lapply(wealth, function(x) x[nrow(x), ])
wealth_df <- tibble(date = All_years$TIME_PERIOD[36:124]) %>%
cbind(last_row_list)
df <- tibble(strings = new_names)
# 3. Use 'extract' to split the string into new columns
# "(\\d+)" is a regular expression for "one or more digits"
# 'convert = TRUE' automatically makes M, K, and L numeric
df_with_diff <- df %>%
extract(strings,
into = c("m", "Target", "Trigger"),
# This regex now matches decimals
"([\\d\\.]+)x([\\d\\.]+)x([\\d\\.]+)",
convert = TRUE) %>%
mutate(Difference = Trigger - Target)
colnames(wealth_df) <- c("date", round(df_with_diff$Difference, 3))
plot(colMeans(wealth_df[,-1]))
# wealth_df %>%
#   pivot_longer(cols = -date, names_to = "parameters", values_to = "guarantee") %>%
#   ggplot(aes(date, guarantee, color = parameters)) +
#     geom_line() +
#     scale_color_viridis_d(option = "cividis") +
#     theme(legend.position = "none")
